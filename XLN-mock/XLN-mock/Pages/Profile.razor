@page "/profile"
@inject NavigationManager NavigationManager;
@using Microsoft.AspNetCore.Components.Rendering
@namespace XLN_mock.Model
<head>
   <title>@title</title> 
   <link rel="stylesheet" type="text/css" href="styles/app.css">
<link rel="stylesheet" media="only screen and (min-width:720px)" href="styles/desktop.css">
</head>


<div class="header text-center bg-main">
    <div class="bg-light p-2 text-black">
        Need to call Customer Service? <a href=tel class="text-decoration-none">0344 880 7777</a>
    </div>
    <div class="pt-3 pb-3">
        <div class="text-black">
            <img height="25px" src="../images/user_icon.png" /> @user.ContactName (@user.AccountNumber) - <strong><a href="/logout" class="text-decoration-none link-dark">Logout</a></strong>
        </div>
        <div >
            <button @onclick=Toggle class="border-0 bg-transparent fs-1 mt-2 text-white">Account Overview <span style="display:@carrotUp" class="fs-5 pl-2 oi oi-caret-bottom text-white"></span><span style="display:@carrotDown" class="fs-5 pl-2 oi oi-caret-top text-white"></span></button> 
            <div>
                <button @onclick=@(e=>NavTo("support")) class="text-white fs-2 bg-transparent border-0">Support</button>
            </div>
        </div>
        
    </div>
</div>
<div style="display:@disp" class="container px-4 pb-4 mb-3 bg-main">
    <div class="row">Account Number: @user.AccountNumber</div>
    <div class="row">Company Name: @user.CompanyName</div>
    <div class="row">Contact Name: @user.ContactName</div>
    <div class="row">Contact Phone: @user.ContactPhone</div>
    <div class="row">Contact Email: @user.ContactEmail</div>
</div>





<!-- CLIS AND FAULT LISTS -->

<div>
    <div class="mt-2 d-flex flex-row ps-3 align-items-center">
        <div class="me-auto">
            <h2>Phone Lines</h2>
        </div>
        <div class="flex-shrink-1"><button @onclick="@(e=>NavTo("report"))" class="m-2 btn btn-sm bg-main">Report Fault</button></div>
    </div>
    <div class="d-flex flex-column">
        @{PhoneLines(__builder);}
    </div>
    <div class="mt-2 d-flex flex-row ps-3 align-items-center">
        <div class="me-auto">
            <h2>Line and Broadbands</h2>
        </div>
        <div class="flex-shrink-1"><button @onclick="@(e=>NavTo("report"))" class="m-2 btn btn-sm bg-main">Report Fault</button></div>
    </div>
    <div class="d-flex flex-column">
        @{BroadLines(__builder);}
    </div>
</div>


<!--FAULTS-->
<div>
    
    
        @{FaultList(__builder);}
    
</div>



@code {
    private string title = "Profile";

    User user;
    List<string[]> clis = new List<string[]>
    {
        new string[] {"01142567567", "false"},
        new string[] {"01142567890","true" },
        new string[] {"01142567910","true" },
        new string[] {"01142567678","false" }
    };
    FaultForm fault1;

    protected override async Task OnInitializedAsync()
    {
        loadFromDB();
    }
    private void loadFromDB()
    {
        user = new User(4857597, "password","SmallBizAnon", "Jennifer", "email@gmail.com", "0734534545");
        user.addProduct(clis);
        fault1 = new FaultForm(user.Products[0][0],"Pending");
        Console.WriteLine(user.Products[0][0]);
        user.addFault(fault1);
        user.addFault(new FaultForm(user.Products[1][0], "Appointment required"));
        user.addFault(new FaultForm(user.Products[2][0], "Assigned to engineer"));
        user.addFault(new FaultForm(user.Products[3][0], "No fault found"));
        user.addFault(new FaultForm(user.Products[0][0], "Awaiting closure"));
        user.addFault(new FaultForm(user.Products[1][0], "Closed"));
    }

    private void NavTo(string page)
    {
        NavigationManager.NavigateTo($"/"+page);
    }
    

    string disp = "none";
    string carrotUp = "inline-block";
    string carrotDown = "none";
    bool display = false;
    private void Toggle()
    {
        display = !display;
        disp = display ? "block" : "none";
        carrotDown = display ? "none" : "inline-block";
        carrotUp = display ? "inline-block" : "none";

    }

    private void report()
    {
        NavigationManager.NavigateTo("report");
    }
    void CLIlist(RenderTreeBuilder __builder)
    {

        for (int x = 0; x < user.Products.Count; x++)
        {
            <div class="border d-flex flex-row bg-light align-items-center">
                <div class="p-1 me-auto">@user.Products[x][0]</div>
                <div class="flex-shrink-1"><a href="/troubleshoot" class="m-2 btn btn-sm bg-danger">Troubleshoot</a></div>
            </div>
        }
    }
    void PhoneLines(RenderTreeBuilder __builder)
    {
        for(int x = 0; x < user.Products.Count; x++)
        {
            if (user.Products[x][1].Equals("false"))
            {
                <div class="border d-flex flex-row bg-light align-items-center">
                    <div class="p-1 me-auto">@user.Products[x][0]</div>
                <div class="flex-shrink-1"><a href="/troubleshoot" class="m-2 btn btn-sm bg-danger">Troubleshoot</a></div>
            </div>
            }
        }
    }
    void BroadLines(RenderTreeBuilder __builder)
    {
        for(int x = 0; x < user.Products.Count; x++)
        {
            if (user.Products[x][1].Equals("true"))
            {
                <div class="border d-flex flex-row bg-light align-items-center">
                    <div class="p-1 me-auto">@user.Products[x][0]</div>
                <div class="flex-shrink-1"><a href="/troubleshoot" class="m-2 btn btn-sm bg-danger">Troubleshoot</a></div>
                </div>
            }
        }
    }

    bool editing = false;
    bool ableToClose = true;
    string closeIcon = "none";
    FaultForm toDelete;
    private void editFault()
    {
        editing = !editing;
    }
    void FaultList(RenderTreeBuilder __builder)
    {
        if (user.Faults.Count != 0)
        {
            
            <div class="d-flex flex-row ps-3 mt-2 align-items-center">
                <div class="me-auto">
                    <h2>Fault History</h2>
                </div>
                <div class="flex-shrink-1"><button @onclick="@editFault" class="m-2 btn btn-sm text-white" style="background-color:#ff6363;">Cancel/Close Faults</button></div>
            </div>
            foreach (FaultForm fault in user.Faults)
            {
                ableToClose = (fault.Status.Equals("Assigned to engineer"));
                closeIcon = !editing && !ableToClose ? "inline-block" : "none";
                toDelete = fault;
                <div class="d-flex flex-column">
                    <div class="border d-flex flex-row bg-light align-items-center">
                        <div class="p-1 me-auto">@fault.FaultAgainst</div>
                        <div class="flex-shrink-1"><button class="m-2 btn btn-sm bg-warning">@fault.Status</button></div>
                        <div style="display:@closeIcon;"><button class="border-0 bg-transparent" @onclick=@(e => delete(fault))><i class="oi oi-delete"/></button></div>
                    </div>
                </div>
                Console.WriteLine(fault.FaultAgainst);
            }
        }
        else
        {
            
            <div class="d-flex flex-row ps-3 mt-2 align-items-center">
                <div class="me-auto">
                    <h2>No History to Display</h2>
                </div>
                
            </div>
        }

    }
    private void delete(FaultForm against)
    {
        Console.WriteLine(against.FaultAgainst+" "+against.Status);
        Console.WriteLine("Deleting");
        user.delete(against);
    }

}
